@page "/Targets"
@using FifaTrader.Models;
@using FifaTrader.Pages.Components;
@using System.Threading;

<div class="content-body">
    <h2>Transfer Targets</h2>
    <p>Use this page to manage the players you have bid on</p>
    <div class="input-outer">
        <div class="input-number">
            <p>Input the starting price of players you want to sell</p>
            <input type="number" @bind="startPrice" />
        </div>
        <div class="input-number">
            <p>Input the BIN price of player you want to sell</p>
            <input type="number" @bind="binPrice" />
        </div>
    </div>
    <div class="button--layer">
        <button class="btn btn-primary" @onclick="SellPlayers">Sell Players</button>
        <button class="btn btn-primary" @onclick="RefreshPlayers">Refresh Players</button>
        <button class="btn btn-primary" @onclick="ClearExpiredPlayers">Clear Expired Players</button>
    </div>
    <TargetsCount Bids=@players />
    <div>
        <input type="radio" value=true id="Allow" @onchange="RadioSelection" checked=@RadioValue />
        <label for="Allow">Allow API Calls</label>
        <input type="radio" value=false id="Block" @onchange="RadioSelection" checked=@(!RadioValue) />
        <label for="Block">Block API Calls</label>
    </div>
    <BidView Bids=@players />
</div>

@code {
    public int startPrice { get; set; }
    public int binPrice { get; set; }
    public string token { get; set; }
    private bool RadioValue { get; set; } = true;

    public List<BidViewModel> players = new List<BidViewModel>();

    private async Task SellPlayers()
    {
        token = await ProtectedSessionStore.GetAsync<string>("accessToken");

        foreach (var player in players)
        {
            if (RadioValue)
            {
                player.Status = await ApiGateway.SellPlayer(player.TradeId, player.ItemData.playerId, token, startPrice, binPrice);
                this.StateHasChanged();
                await Task.Delay(1000);
            }

        }
    }

    private async Task ClearExpiredPlayers()
    {
        var token = await ProtectedSessionStore.GetAsync<string>("accessToken");
        await ApiGateway.ClearExpiredPlayers(token, players);
        await RefreshPlayers();

    }

    private async Task RefreshPlayers()
    {
        await UpdateTransferTargets();
        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        var timer = new Timer(new TimerCallback(async _ =>
        {
            if (players.Count != 0)
            {
                if (players.Max(x => x.TimeRemaining != -1))
                {
                    await UpdateTransferTargets();
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                }
            }
        }), null, 1000, 10000);
    }

    protected async Task UpdateTransferTargets()
    {
        token = await ProtectedSessionStore.GetAsync<string>("accessToken");

        players = await ApiGateway.GetTransferTargets(token);
    }

    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString() == "true";
        this.StateHasChanged();
    }
}
