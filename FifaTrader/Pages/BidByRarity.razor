@page "/massbidbyrarity"
@using FifaTrader.Models;
@using FifaTrader.Models.SearchOptions
@using FifaTrader.Pages.Components;

<div class="content-body">
    <h2>Mass Bidder</h2>
    <p>Use this page to mass bid on rare or common players</p>
    <div>
        <div class="centre-aligned">
            <div class="centre-aligned-inner">
                <p>Input the price you want to bid</p>
                <input type="number" step="50" @bind="bidPrice" />
                <div class="increment-options">
                    <button class="btn btn-primary" @onclick="e => this.IncrementBidPrice(100)">+100</button>
                    <button class="btn btn-primary" @onclick="e => this.IncrementBidPrice(1000)">+1000</button>
                </div>
            </div>
            <div class="centre-aligned-inner">
                <p>Select either rare or common</p>
                <select name="rarityId" @onchange="RaritySelection" class="select">
                    <option value="1">Rare</option>
                    <option value="0">Common</option>
                </select>
            </div>
        </div>
        <div class="select-options">
            <div class="">
                <button @onclick="e => this.ClickOnShowLeague()" class="optional-btn @(HasClickedOnShowLeague? "GreyedOut": "")">
                    OPTIONAL - Select a league
                </button>
            </div>
            <div class="@(ShowLeagueOptions? "": "collapse")">
                <select name="leagueId" @onchange="LeagueSelection" class="select">
                    <option value="0">Select a League</option>
                    @foreach (var league in Leagues)
                    {
                        <option value=@league.Value>@league.Key</option>
                    }
                </select>
            </div>
        </div>

        <div class="select-options">
            <div>
                <button @onclick="e => this.ClickOnShowPosition()" class="optional-btn @(HasClickedOnShowPositions? "GreyedOut": "")">
                    OPTIONAL - Select a Position
                </button>
            </div>
            <div class="@(ShowPositionOptions? "": "collapse" )">
                <select name="positionId" @onchange="PositionSelection" class="select">
                    <option value="0">Select a position</option>
                    @foreach (var position in Positions)
                    {
                        <option value=@position>@position</option>
                    })
                </select>
            </div>
        </div>
        <div class="select-options">
            <div>
                <button @onclick="e => this.ClickOnShowNation()" class="optional-btn @(HasClickedOnShowNationality? "GreyedOut": "")">
                    OPTIONAL - Select a Nation
                </button>
            </div>
            <div class="@(ShowNationalityOptions? "": "collapse" )">
                <select name="nationId" @onchange="NationSelection" class="select">
                    <option value="0">Select a Nation</option>
                    @foreach (var nation in Nations)
                    {
                        <option value=@nation.Value>@nation.Key</option>
                    })
                </select>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="BidOnPlayers">Bid</button>
    <div>
        <input type="radio" value=true id="Allow" @onchange="RadioSelection" checked=@RadioValue />
        <label for="Allow">Allow API Calls</label>
        <input type="radio" value=false id="Block" @onchange="RadioSelection" checked=@(!RadioValue) />
        <label for="Block">Block API Calls</label>
    </div>
    <BidView Bids=@bids />
</div>

@code {
    public int leagueId { get; set; }
    public int rarityId { get; set; } = 1;
    public string positionSelection { get; set; }
    public int nationId { get; set; }
    public int bidPrice { get; set; }
    public string token { get; set; }
    private bool RadioValue { get; set; } = true;

    private bool ShowLeagueOptions { get; set; } = false;
    private bool HasClickedOnShowLeague { get; set; } = false;

    private bool ShowPositionOptions { get; set; } = false;
    private bool HasClickedOnShowPositions { get; set; } = false;

    private bool ShowNationalityOptions { get; set; } = false;
    private bool HasClickedOnShowNationality { get; set; } = false;

    private List<string> Positions = new PlayerPositions().Positions;
    private Dictionary<string, string> Leagues = new Leagues().LeagueOptions;
    private Dictionary<string, int> Nations = new Nations().NationOptions;

    public List<BidViewModel> bids = new List<BidViewModel>();

    private async Task BidOnPlayers()
    {
        token = await ProtectedSessionStore.GetAsync<string>("accessToken");
        bids = await ApiGateway.FetchPlayersByLeague(leagueId, rarityId, bidPrice, token, positionSelection, nationId);

        for (var i = 0; i < bids.Count; i++)
        {
            if (RadioValue && bids[i].TimeRemaining < 3600 && bids[i].TimeRemaining > 0)
            {
                bids[i].Status = await ApiGateway.BidOnPlayer(bids[i].TradeId, bidPrice, token);

                bids[i].BidPrice = bidPrice;
                this.StateHasChanged();
                if (bids[i].Status != "Success")
                {
                    ErrorAllBids(i);
                    break;
                }
                await Task.Delay(1000);
            }
            else
            {
                ErrorAllBids(i);
                RadioValue = false;

            }
        }
    }

    private void ErrorAllBids(int index)
    {
        for (var i = index; i < bids.Count; i++)
        {
            bids[i].Status = "Error";
            bids[i].Pending = false;
            bids[i].TimeRemaining = 0;
        }
    }

    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString() == "true";
        this.StateHasChanged();
    }


    void LeagueSelection(ChangeEventArgs args)
    {
        leagueId = int.Parse(args.Value.ToString());
        this.StateHasChanged();
    }

    void NationSelection(ChangeEventArgs args)
    {
        nationId = int.Parse(args.Value.ToString());
        this.StateHasChanged();
    }

    void RaritySelection(ChangeEventArgs args)
    {
        rarityId = int.Parse(args.Value.ToString());
        this.StateHasChanged();
    }

    void PositionSelection(ChangeEventArgs args)
    {
        positionSelection = args.Value.ToString();
        this.StateHasChanged();
    }

    void ClickOnShowLeague()
    {
        ShowLeagueOptions = !ShowLeagueOptions;
        HasClickedOnShowLeague = true;
    }

    void ClickOnShowPosition()
    {
        ShowPositionOptions = !ShowPositionOptions;
        HasClickedOnShowPositions = true;
    }

    void ClickOnShowNation()
    {
        ShowNationalityOptions = !ShowNationalityOptions;
        HasClickedOnShowNationality = true;
    }

    void IncrementBidPrice(int increase)
    {
        bidPrice += increase;
    }
}
