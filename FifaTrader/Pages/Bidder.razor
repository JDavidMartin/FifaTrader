@page "/massbid"
@using FifaTrader.Models;
@using FifaTrader.Pages.Components;

<div class="content-body">
    <h2>Mass Bidder</h2>
    <p>Use this page to mass bid on a player</p>
    <div class="input-outer">
        <div class="input-number">
            <p>Input the price you want to bid</p>
            <input type="number" step="50" @bind="bidPrice" />
            <div class="increment-options">
                    <button class="btn btn-primary" @onclick="e => this.IncrementBidPrice(100)">+100</button>
                    <button class="btn btn-primary" @onclick="e => this.IncrementBidPrice(1000)">+1000</button>
            </div>
        </div>
        <div class="input-number">
            <p>Input the ID of the player you are bidding on</p>
            <input type="number" @bind="playerId" />
        </div>
    </div>

    <div>
        <input type="checkbox" value="false" id="Extend" @onchange="CheckBoxSelection" checked="@ExtendPlayerInfo" />
        <label for="Extend">Show Player Id's?</label>
        <PlayerIdComponent Extend=@ExtendPlayerInfo ParentOnClickFunction="SetPlayerIdValue" />
    </div>
    <button class="btn btn-primary" @onclick="BidOnPlayers">Bid</button>
    <div>
        <input type="radio" value=true id="Allow" @onchange="RadioSelection" checked=@RadioValue />
        <label for="Allow">Allow API Calls</label>
        <input type="radio" value=false id="Block" @onchange="RadioSelection" checked=@(!RadioValue) />
        <label for="Block">Block API Calls</label>
    </div>
    <BidView Bids=@bids />
</div>

@code {
    public int playerId { get; set; }
    public int bidPrice { get; set; }
    public string token { get; set; }
    private bool RadioValue { get; set; } = true;
    private bool ExtendPlayerInfo { get; set; } = true;

    public List<BidViewModel> bids = new List<BidViewModel>();

    private async Task BidOnPlayers()
    {
        token = await ProtectedSessionStore.GetAsync<string>("accessToken");
        bids = await ApiGateway.FetchPlayers(playerId, bidPrice, token);

        for (var i = 0; i < bids.Count; i++)
        {
            if (RadioValue && bids[i].TimeRemaining < 3600 && bids[i].TimeRemaining > 0)
            {
                bids[i].Status = await ApiGateway.BidOnPlayer(bids[i].TradeId, bidPrice, token);

                bids[i].BidPrice = bidPrice;
                this.StateHasChanged();
                if (bids[i].Status != "Success")
                {
                    ErrorAllBids(i);
                    break;
                }
                await Task.Delay(1000);
            }
            else
            {
                ErrorAllBids(i);
                RadioValue = false;

            }
        }
    }

    private void ErrorAllBids(int index)
    {
        for (var i = index; i < bids.Count; i++)
        {
            bids[i].Status = "Error";
            bids[i].Pending = false;
            bids[i].TimeRemaining = 0;
        }
    }

    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString() == "true";
        this.StateHasChanged();
    }

    void CheckBoxSelection()
    {
        ExtendPlayerInfo = !ExtendPlayerInfo;
        this.StateHasChanged();
    }

    void SetPlayerIdValue(int selectedPlayerId)
    {
        playerId = selectedPlayerId;
    }

    void IncrementBidPrice(int increase)
    {
        bidPrice += increase;
    }
}
